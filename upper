#include <stdio.h>

void printMatrix(int n, float matrix[][n]) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%.2f ", matrix[i][j]);
        }
        printf("\n");
    }
}

void gaussJordanElimination(int n, float matrix[][n]) {
    for (int i = 0; i < n; i++) {
        // 피봇 요소가 0인 경우 행 교환
        if (matrix[i][i] == 0) {
            int flag = 0;
            for (int j = i + 1; j < n; j++) {
                if (matrix[j][i] != 0) {
                    for (int k = 0; k < n; k++) {
                        float temp = matrix[i][k];
                        matrix[i][k] = matrix[j][k];
                        matrix[j][k] = temp;
                    }
                    flag = 1;
                    break;
                }
            }
            if (flag == 0) {
                continue; // 다음 열로 진행
            }
        }

        // 피봇 요소로 나머지 행들을 소거
        float pivot = matrix[i][i];
        for (int j = 0; j < n; j++) {
            matrix[i][j] /= pivot; // 피봇 행을 나누어 1로 만듦
        }
        for (int j = 0; j < n; j++) {
            if (j != i) {
                float ratio = matrix[j][i];
                for (int k = 0; k < n; k++) {
                    matrix[j][k] -= ratio * matrix[i][k]; // 소거 작업
                }
            }
        }
    }
}

int main() {
    int n;

    printf("행렬의 차원을 입력하세요: ");
    scanf("%d", &n);

    float matrix[n][n];

    printf("행렬의 원소를 입력하세요:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%f", &matrix[i][j]);
        }
    }

    printf("입력된 행렬:\n");
    printMatrix(n, matrix);

    gaussJordanElimination(n, matrix);

    printf("상삼각행렬:\n");
    printMatrix(n, matrix);

    return 0;
}
