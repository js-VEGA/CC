#include <stdio.h>

// 부분 행렬을 생성하는 함수
void createSubmatrix(int mat[][10], int temp[][10], int p, int q, int n) {
    int i = 0, j = 0;
    
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            // 부분 행렬의 행과 열이 p와 q와 같지 않은 경우
            if (row != p && col != q) {
                temp[i][j++] = mat[row][col];
                
                // 현재 행이 모두 저장되었으면 다음 행으로 이동
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

// 행렬식 계산하는 함수
int calculateDeterminant(int mat[][10], int n) {
    int det = 0; // 행렬식의 초기값
    
    // 기저 사례: 2x2 행렬일 때
    if (n == 2) {
        return mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
    }
    
    int sign = 1; // 행렬식의 부호
    int temp[10][10]; // 부분 행렬을 저장하기 위한 배열
    
    // 첫 번째 행의 원소들을 순회하며 행렬식 계산
    for (int f = 0; f < n; f++) {
        createSubmatrix(mat, temp, 0, f, n); // 첫 번째 행 제외한 나머지 부분 행렬 생성
        det += sign * mat[0][f] * calculateDeterminant(temp, n - 1); // 재귀 호출
        sign = -sign; // 부호 변경
    }
    
    return det; // 행렬식 반환
}

int main() {
    int mat[10][10]; // 입력 행렬
    int n; // 행렬의 차원
    
    printf("행렬의 차원을 입력하세요: ");
    scanf("%d", &n);
    
    printf("행렬의 원소를 입력하세요:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &mat[i][j]);
        }
    }
    
    int det = calculateDeterminant(mat, n); // 행렬식 계산
    
    printf("행렬식의 값은 %d입니다.\n", det);
    
    return 0;
}
